// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package todo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodoServiceClient is the client API for TodoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoServiceClient interface {
	GetTodo(ctx context.Context, in *GetTodoRequest, opts ...grpc.CallOption) (*GetTodoResponse, error)
	GetTodos(ctx context.Context, in *GetTodosRequest, opts ...grpc.CallOption) (TodoService_GetTodosClient, error)
	SaveTodos(ctx context.Context, opts ...grpc.CallOption) (TodoService_SaveTodosClient, error)
	BiDirectionalTodos(ctx context.Context, opts ...grpc.CallOption) (TodoService_BiDirectionalTodosClient, error)
}

type todoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoServiceClient(cc grpc.ClientConnInterface) TodoServiceClient {
	return &todoServiceClient{cc}
}

func (c *todoServiceClient) GetTodo(ctx context.Context, in *GetTodoRequest, opts ...grpc.CallOption) (*GetTodoResponse, error) {
	out := new(GetTodoResponse)
	err := c.cc.Invoke(ctx, "/todo.TodoService/GetTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) GetTodos(ctx context.Context, in *GetTodosRequest, opts ...grpc.CallOption) (TodoService_GetTodosClient, error) {
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[0], "/todo.TodoService/GetTodos", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceGetTodosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TodoService_GetTodosClient interface {
	Recv() (*GetTodoResponse, error)
	grpc.ClientStream
}

type todoServiceGetTodosClient struct {
	grpc.ClientStream
}

func (x *todoServiceGetTodosClient) Recv() (*GetTodoResponse, error) {
	m := new(GetTodoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoServiceClient) SaveTodos(ctx context.Context, opts ...grpc.CallOption) (TodoService_SaveTodosClient, error) {
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[1], "/todo.TodoService/SaveTodos", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceSaveTodosClient{stream}
	return x, nil
}

type TodoService_SaveTodosClient interface {
	Send(*SaveTodoRequest) error
	CloseAndRecv() (*SaveTodoResponse, error)
	grpc.ClientStream
}

type todoServiceSaveTodosClient struct {
	grpc.ClientStream
}

func (x *todoServiceSaveTodosClient) Send(m *SaveTodoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *todoServiceSaveTodosClient) CloseAndRecv() (*SaveTodoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SaveTodoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoServiceClient) BiDirectionalTodos(ctx context.Context, opts ...grpc.CallOption) (TodoService_BiDirectionalTodosClient, error) {
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[2], "/todo.TodoService/BiDirectionalTodos", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceBiDirectionalTodosClient{stream}
	return x, nil
}

type TodoService_BiDirectionalTodosClient interface {
	Send(*TodoRequest) error
	Recv() (*TodoResponse, error)
	grpc.ClientStream
}

type todoServiceBiDirectionalTodosClient struct {
	grpc.ClientStream
}

func (x *todoServiceBiDirectionalTodosClient) Send(m *TodoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *todoServiceBiDirectionalTodosClient) Recv() (*TodoResponse, error) {
	m := new(TodoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TodoServiceServer is the server API for TodoService service.
// All implementations must embed UnimplementedTodoServiceServer
// for forward compatibility
type TodoServiceServer interface {
	GetTodo(context.Context, *GetTodoRequest) (*GetTodoResponse, error)
	GetTodos(*GetTodosRequest, TodoService_GetTodosServer) error
	SaveTodos(TodoService_SaveTodosServer) error
	BiDirectionalTodos(TodoService_BiDirectionalTodosServer) error
	mustEmbedUnimplementedTodoServiceServer()
}

// UnimplementedTodoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTodoServiceServer struct {
}

func (UnimplementedTodoServiceServer) GetTodo(context.Context, *GetTodoRequest) (*GetTodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodo not implemented")
}
func (UnimplementedTodoServiceServer) GetTodos(*GetTodosRequest, TodoService_GetTodosServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTodos not implemented")
}
func (UnimplementedTodoServiceServer) SaveTodos(TodoService_SaveTodosServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveTodos not implemented")
}
func (UnimplementedTodoServiceServer) BiDirectionalTodos(TodoService_BiDirectionalTodosServer) error {
	return status.Errorf(codes.Unimplemented, "method BiDirectionalTodos not implemented")
}
func (UnimplementedTodoServiceServer) mustEmbedUnimplementedTodoServiceServer() {}

// UnsafeTodoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoServiceServer will
// result in compilation errors.
type UnsafeTodoServiceServer interface {
	mustEmbedUnimplementedTodoServiceServer()
}

func RegisterTodoServiceServer(s grpc.ServiceRegistrar, srv TodoServiceServer) {
	s.RegisterService(&TodoService_ServiceDesc, srv)
}

func _TodoService_GetTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).GetTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.TodoService/GetTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).GetTodo(ctx, req.(*GetTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_GetTodos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTodosRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TodoServiceServer).GetTodos(m, &todoServiceGetTodosServer{stream})
}

type TodoService_GetTodosServer interface {
	Send(*GetTodoResponse) error
	grpc.ServerStream
}

type todoServiceGetTodosServer struct {
	grpc.ServerStream
}

func (x *todoServiceGetTodosServer) Send(m *GetTodoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TodoService_SaveTodos_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TodoServiceServer).SaveTodos(&todoServiceSaveTodosServer{stream})
}

type TodoService_SaveTodosServer interface {
	SendAndClose(*SaveTodoResponse) error
	Recv() (*SaveTodoRequest, error)
	grpc.ServerStream
}

type todoServiceSaveTodosServer struct {
	grpc.ServerStream
}

func (x *todoServiceSaveTodosServer) SendAndClose(m *SaveTodoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *todoServiceSaveTodosServer) Recv() (*SaveTodoRequest, error) {
	m := new(SaveTodoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TodoService_BiDirectionalTodos_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TodoServiceServer).BiDirectionalTodos(&todoServiceBiDirectionalTodosServer{stream})
}

type TodoService_BiDirectionalTodosServer interface {
	Send(*TodoResponse) error
	Recv() (*TodoRequest, error)
	grpc.ServerStream
}

type todoServiceBiDirectionalTodosServer struct {
	grpc.ServerStream
}

func (x *todoServiceBiDirectionalTodosServer) Send(m *TodoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *todoServiceBiDirectionalTodosServer) Recv() (*TodoRequest, error) {
	m := new(TodoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TodoService_ServiceDesc is the grpc.ServiceDesc for TodoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todo.TodoService",
	HandlerType: (*TodoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTodo",
			Handler:    _TodoService_GetTodo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTodos",
			Handler:       _TodoService_GetTodos_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SaveTodos",
			Handler:       _TodoService_SaveTodos_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BiDirectionalTodos",
			Handler:       _TodoService_BiDirectionalTodos_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/todo/todo.proto",
}
